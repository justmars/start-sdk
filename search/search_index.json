{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Settings for Github, Cloudflare</p> <p>Add .env variables for:</p> <ol> <li>CRUD operations on Cloudflare Images</li> <li>CRUD operations on Cloudflare R2</li> <li>Reading repositories on Github.</li> </ol>"},{"location":"cf_img/","title":"CRUD Cloudflare Images","text":"<p>         Bases: <code>BaseSettings</code></p>"},{"location":"cf_img/#start_sdk.cf_img.CFImage--cloudflare-images-api-v4","title":"Cloudflare Images API v4","text":"<p>Add secrets to .env file:</p> Field in .env Cloudflare API Credential Where credential found <code>CF_IMG_ACCT</code> Account ID <code>https://dash.cloudflare.com/&lt;acct_id&gt;/images/images</code> <code>CF_IMG_TOKEN</code> Account Hash <code>https://dash.cloudflare.com/&lt;acct_id&gt;/images/images</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; import io\n&gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ABC\"\n&gt;&gt;&gt; os.environ['CF_IMG_TOKEN'] = \"XYZ\"\n&gt;&gt;&gt; from start_sdk import CFImage\n&gt;&gt;&gt; cf = CFImage()\n&gt;&gt;&gt; cf.headers\n{'Authorization': 'Bearer XYZ'}\n&gt;&gt;&gt; cf.base\n'https://api.cloudflare.com/client/v4/accounts/ABC/images/v1'\n&gt;&gt;&gt; p = Path().cwd() / \"img\" / \"screenshot.png\"\n&gt;&gt;&gt; p.exists() # Sample image found in `/img/screenshot.png`\nTrue\n&gt;&gt;&gt; img = io.BytesIO(p.read_bytes())\n&gt;&gt;&gt; type(img)\n&lt;class '_io.BytesIO'&gt;\n&gt;&gt;&gt; # Can now use img in `cf.post('sample_id', img)`\n</code></pre> Source code in <code>start_sdk/cf_img.py</code> Python<pre><code>class CFImage(BaseSettings):\n\"\"\"\n    # Cloudflare [Images](https://developers.cloudflare.com/images/cloudflare-images/) API v4\n    Add secrets to .env file:\n    Field in .env | Cloudflare API Credential | Where credential found\n    :--|:--:|:--\n    `CF_IMG_ACCT` | Account ID | `https://dash.cloudflare.com/&lt;acct_id&gt;/images/images`\n    `CF_IMG_TOKEN` | Account Hash | `https://dash.cloudflare.com/&lt;acct_id&gt;/images/images`\n    Examples:\n        &gt;&gt;&gt; from pathlib import Path\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; import io\n        &gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ABC\"\n        &gt;&gt;&gt; os.environ['CF_IMG_TOKEN'] = \"XYZ\"\n        &gt;&gt;&gt; from start_sdk import CFImage\n        &gt;&gt;&gt; cf = CFImage()\n        &gt;&gt;&gt; cf.headers\n        {'Authorization': 'Bearer XYZ'}\n        &gt;&gt;&gt; cf.base\n        'https://api.cloudflare.com/client/v4/accounts/ABC/images/v1'\n        &gt;&gt;&gt; p = Path().cwd() / \"img\" / \"screenshot.png\"\n        &gt;&gt;&gt; p.exists() # Sample image found in `/img/screenshot.png`\n        True\n        &gt;&gt;&gt; img = io.BytesIO(p.read_bytes())\n        &gt;&gt;&gt; type(img)\n        &lt;class '_io.BytesIO'&gt;\n        &gt;&gt;&gt; # Can now use img in `cf.post('sample_id', img)`\n    \"\"\"  # noqa: E501\nacct: str = Field(default=\"ABC\", repr=False, env=\"CF_ACCT_ID\")\ntoken: str = Field(default=\"XYZ\", repr=False, env=\"CF_IMG_TOKEN\")\ntimeout: int = Field(default=60)\nclass Config:\nenv_file = \".env\"\nenv_file_encoding = \"utf-8\"\n@property\ndef headers(self) -&gt; dict:\nreturn {\"Authorization\": f\"Bearer {self.token}\"}\n@property\ndef base(self):\nreturn f\"https://api.cloudflare.com/client/v4/accounts/{self.acct}/images/v1\"\ndef get(self, img_id: str) -&gt; httpx.Response:\n\"\"\"See Cloudflare docs for [serve images](https://developers.cloudflare.com/images/cloudflare-images/serve-images/)\"\"\"  # noqa: E501\nwith httpx.Client(timeout=self.timeout) as client:\nreturn client.get(\nurl=f\"{self.base}/{img_id}\", headers=self.headers\n)\ndef delete(self, img_id: str) -&gt; httpx.Response:\n\"\"\"See Cloudflare docs for [delete images](https://developers.cloudflare.com/images/cloudflare-images/transform/delete-images/)\"\"\"  # noqa: E501\nwith httpx.Client(timeout=self.timeout) as client:\nreturn client.delete(\nurl=f\"{self.base}/{img_id}\", headers=self.headers\n)\ndef post(self, img_id: str, img: bytes) -&gt; httpx.Response:\n\"\"\"See Cloudflare docs for [upload via url](https://developers.cloudflare.com/images/cloudflare-images/upload-images/upload-via-url/)\"\"\"  # noqa: E501\nwith httpx.Client(timeout=self.timeout) as client:\nreturn client.post(\nurl=self.base,\nheaders=self.headers,\ndata={\"id\": img_id},\nfiles={\"file\": (img_id, img)},\n)\n</code></pre>"},{"location":"cf_img/#start_sdk.cf_img.CFImage-functions","title":"Functions","text":""},{"location":"cf_img/#start_sdk.cf_img.CFImage.delete","title":"<code>delete(img_id)</code>","text":"<p>See Cloudflare docs for delete images</p> Source code in <code>start_sdk/cf_img.py</code> Python<pre><code>def delete(self, img_id: str) -&gt; httpx.Response:\n\"\"\"See Cloudflare docs for [delete images](https://developers.cloudflare.com/images/cloudflare-images/transform/delete-images/)\"\"\"  # noqa: E501\nwith httpx.Client(timeout=self.timeout) as client:\nreturn client.delete(\nurl=f\"{self.base}/{img_id}\", headers=self.headers\n)\n</code></pre>"},{"location":"cf_img/#start_sdk.cf_img.CFImage.get","title":"<code>get(img_id)</code>","text":"<p>See Cloudflare docs for serve images</p> Source code in <code>start_sdk/cf_img.py</code> Python<pre><code>def get(self, img_id: str) -&gt; httpx.Response:\n\"\"\"See Cloudflare docs for [serve images](https://developers.cloudflare.com/images/cloudflare-images/serve-images/)\"\"\"  # noqa: E501\nwith httpx.Client(timeout=self.timeout) as client:\nreturn client.get(\nurl=f\"{self.base}/{img_id}\", headers=self.headers\n)\n</code></pre>"},{"location":"cf_img/#start_sdk.cf_img.CFImage.post","title":"<code>post(img_id, img)</code>","text":"<p>See Cloudflare docs for upload via url</p> Source code in <code>start_sdk/cf_img.py</code> Python<pre><code>def post(self, img_id: str, img: bytes) -&gt; httpx.Response:\n\"\"\"See Cloudflare docs for [upload via url](https://developers.cloudflare.com/images/cloudflare-images/upload-images/upload-via-url/)\"\"\"  # noqa: E501\nwith httpx.Client(timeout=self.timeout) as client:\nreturn client.post(\nurl=self.base,\nheaders=self.headers,\ndata={\"id\": img_id},\nfiles={\"file\": (img_id, img)},\n)\n</code></pre>"},{"location":"cf_r2/","title":"Cloudflare R2","text":""},{"location":"cf_r2/#resource","title":"Resource","text":"<p>         Bases: <code>BaseSettings</code></p> <p>CFR2</p> <p>Cloudflare R2 via Amazon S3 API.</p> <p>The Cloudflare R2 key/secret follows AWS S3 conventions, see compatability in docs..</p> <p>Add secrets to .env file:</p> Field in .env Cloudflare API Credential Where credential found <code>CF_ACCT_ID</code> Account ID <code>https://dash.cloudflare.com/&lt;acct_id&gt;/r2</code> <code>CF_R2_REGION</code> Default Region: <code>apac</code> See options <code>R2_ACCESS_KEY_ID</code> Key When R2 Token created in <code>https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens</code> <code>R2_SECRET_ACCESS_KEY</code> Secret When R2 Token created in <code>https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ACT\"\n&gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n&gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n&gt;&gt;&gt; from start_sdk import CFR2\n&gt;&gt;&gt; r2 = CFR2()\n&gt;&gt;&gt; type(r2.resource)\n&lt;class 'boto3.resources.factory.s3.ServiceResource'&gt;\n</code></pre> Source code in <code>start_sdk/cf_r2.py</code> Python<pre><code>class CFR2(BaseSettings):\n\"\"\"\n    _CFR2_\n    Cloudflare R2 via Amazon S3 [API](https://developers.cloudflare.com/r2/examples/boto3/).\n    The Cloudflare R2 key/secret follows AWS S3 conventions, see compatability in docs..\n    Add secrets to .env file:\n    Field in .env | Cloudflare API Credential | Where credential found\n    :--|:--:|:--\n    `CF_ACCT_ID` | Account ID | `https://dash.cloudflare.com/&lt;acct_id&gt;/r2`\n    `CF_R2_REGION` | Default Region: `apac` | See [options](https://developers.cloudflare.com/r2/learning/data-location/#available-hints)\n    `R2_ACCESS_KEY_ID` | Key | When R2 Token created in `https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens`\n    `R2_SECRET_ACCESS_KEY` | Secret | When R2 Token created in `https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens`\n    Examples:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ACT\"\n        &gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n        &gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n        &gt;&gt;&gt; from start_sdk import CFR2\n        &gt;&gt;&gt; r2 = CFR2()\n        &gt;&gt;&gt; type(r2.resource)\n        &lt;class 'boto3.resources.factory.s3.ServiceResource'&gt;\n    \"\"\"  # noqa: E501\nacct: str = Field(default=\"ACT\", repr=False, env=\"CF_ACCT_ID\")\nr2_region: str = Field(default=\"apac\", repr=True, env=\"CF_R2_REGION\")\nr2_access_key: str = Field(\ndefault=\"ABC\",\nrepr=False,\ntitle=\"R2 Key\",\ndescription=(  # noqa: E501\n\"The Cloudflare R2 key/secret follows AWS S3 conventions, see\"\n\" compatability in docs.\"\n),\nenv=\"R2_ACCESS_KEY_ID\",\n)\nr2_secret_key: str = Field(\ndefault=\"XYZ\",\nrepr=False,\ntitle=\"R2 Secret\",\ndescription=(  # noqa: E501\n\"The Cloudflare R2 key/secret follows AWS S3 conventions, see\"\n\" compatability in docs.\"\n),\nenv=\"R2_SECRET_ACCESS_KEY\",\n)\nclass Config:\nenv_file = \".env\"\nenv_file_encoding = \"utf-8\"\n@property\ndef endpoint_url(self):\nreturn f\"https://{self.acct}.r2.cloudflarestorage.com\"\n@property\ndef resource(self):\n\"\"\"Resource can be used as a means to access the bucket via an instantiated\n        `r2`, e.g. `r2.resource.Bucket('&lt;created-bucket-name&gt;')`\n        \"\"\"\nreturn boto3.resource(\n\"s3\",\nendpoint_url=self.endpoint_url,\naws_access_key_id=self.r2_access_key,\naws_secret_access_key=self.r2_secret_key,\nregion_name=self.r2_region,\n)\ndef get_bucket(self, bucket_name: str):\nreturn self.resource.Bucket(bucket_name)  # type: ignore\n</code></pre>"},{"location":"cf_r2/#start_sdk.cf_r2.CFR2-attributes","title":"Attributes","text":""},{"location":"cf_r2/#start_sdk.cf_r2.CFR2.resource","title":"<code>resource</code>  <code>property</code>","text":"<p>Resource can be used as a means to access the bucket via an instantiated <code>r2</code>, e.g. <code>r2.resource.Bucket('&lt;created-bucket-name&gt;')</code></p>"},{"location":"cf_r2/#bucket","title":"Bucket","text":"<p>         Bases: <code>CFR2</code></p> <p>CFR2_Bucket</p> <p>Helper function that can be assigned to each bucket.</p> <p>Note AWS API reference vs. R2</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ['CF_R2_ACCT_ID'] = \"ACT\"\n&gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n&gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n&gt;&gt;&gt; from start_sdk import CFR2_Bucket\n&gt;&gt;&gt; obj = CFR2_Bucket(name='test')\n&gt;&gt;&gt; type(obj.bucket)\n&lt;class 'boto3.resources.factory.s3.Bucket'&gt;\n</code></pre> Source code in <code>start_sdk/cf_r2.py</code> Python<pre><code>class CFR2_Bucket(CFR2):\n\"\"\"\n    _CFR2_Bucket_\n    Helper function that can be assigned to each bucket.\n    Note [AWS API reference](https://docs.aws.amazon.com/AmazonS3/latest/API) vs. [R2](https://developers.cloudflare.com/r2/data-access/s3-api/api/)\n    Examples:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ['CF_R2_ACCT_ID'] = \"ACT\"\n        &gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n        &gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n        &gt;&gt;&gt; from start_sdk import CFR2_Bucket\n        &gt;&gt;&gt; obj = CFR2_Bucket(name='test')\n        &gt;&gt;&gt; type(obj.bucket)\n        &lt;class 'boto3.resources.factory.s3.Bucket'&gt;\n    \"\"\"  # noqa: E501\nname: str\n@property\ndef bucket(self):\nreturn self.get_bucket(self.name)\n@property\ndef client(self):\nreturn self.bucket.meta.client\ndef filter(self, prefix: str, key: str | None = None) -&gt; Iterator[str]:\n\"\"\"See modified recipe from boto3 re: [filtering](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/collections.html#filtering). Fetches objects in the bucket based on the `prefix` supplied. If a `key` is supplied with the `prefix`, a secondary filter is applied.\n        Args:\n            prefix (str): Main filter.\n            key (str | None, optional): Secondary filter. Defaults to None.\n        Yields:\n            Iterator[str]: The keys from the bucket matching prefix and key.\n        \"\"\"  # noqa: E501\nobjs = self.bucket.objects.filter(Prefix=prefix)\nfor obj in objs:\nif key:\nif key in obj.key:\nyield obj.key\nelse:\nyield obj.key\ndef upload(self, file_like: str | Path, loc: str, args: dict = {}):\n\"\"\"Upload local `file_like` contents to r2-bucket path `loc`.\n        Args:\n            file_like (str | Path): Local file\n            loc (str): Remote location\n            args (dict, optional): Will populate `ExtraArgs` during upload.\n                Defaults to {}.\n        \"\"\"\nwith open(file_like, \"rb\") as read_file:\nreturn self.bucket.upload_fileobj(read_file, loc, ExtraArgs=args)\ndef download(self, loc: str, local_file: str):\n\"\"\"With a r2-bucket `loc`, download contents to `local_file`.\n        Args:\n            loc (str): Origin file to download\n            local_file (str): Where to download, how to name downloaded file\n        \"\"\"\nwith open(local_file, \"wb\") as write_file:\nreturn self.bucket.download_fileobj(loc, write_file)\ndef get_root_prefixes(self):\n\"\"\"See adapted recipe from boto3 re: top-level [prefixes](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#list-top-level-common-prefixes-in-amazon-s3-bucket).\n        Returns:\n            list[str]: Matching prefixes in the root of the bucket.\n        \"\"\"  # noqa: E501\n_objs = []\npaginator = self.client.get_paginator(\"list_objects\")\nresult = paginator.paginate(Bucket=self.name, Delimiter=\"/\")\nfor prefix in result.search(\"CommonPrefixes\"):\n_objs.append(prefix.get(\"Prefix\"))  # type: ignore\nreturn _objs\n</code></pre>"},{"location":"cf_r2/#start_sdk.cf_r2.CFR2_Bucket-functions","title":"Functions","text":""},{"location":"cf_r2/#start_sdk.cf_r2.CFR2_Bucket.download","title":"<code>download(loc, local_file)</code>","text":"<p>With a r2-bucket <code>loc</code>, download contents to <code>local_file</code>.</p> <p>Parameters:</p> Name Type Description Default <code>loc</code> <code>str</code> <p>Origin file to download</p> required <code>local_file</code> <code>str</code> <p>Where to download, how to name downloaded file</p> required Source code in <code>start_sdk/cf_r2.py</code> Python<pre><code>def download(self, loc: str, local_file: str):\n\"\"\"With a r2-bucket `loc`, download contents to `local_file`.\n    Args:\n        loc (str): Origin file to download\n        local_file (str): Where to download, how to name downloaded file\n    \"\"\"\nwith open(local_file, \"wb\") as write_file:\nreturn self.bucket.download_fileobj(loc, write_file)\n</code></pre>"},{"location":"cf_r2/#start_sdk.cf_r2.CFR2_Bucket.filter","title":"<code>filter(prefix, key=None)</code>","text":"<p>See modified recipe from boto3 re: filtering. Fetches objects in the bucket based on the <code>prefix</code> supplied. If a <code>key</code> is supplied with the <code>prefix</code>, a secondary filter is applied.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>Main filter.</p> required <code>key</code> <code>str | None</code> <p>Secondary filter. Defaults to None.</p> <code>None</code> <p>Yields:</p> Type Description <code>Iterator[str]</code> <p>Iterator[str]: The keys from the bucket matching prefix and key.</p> Source code in <code>start_sdk/cf_r2.py</code> Python<pre><code>def filter(self, prefix: str, key: str | None = None) -&gt; Iterator[str]:\n\"\"\"See modified recipe from boto3 re: [filtering](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/collections.html#filtering). Fetches objects in the bucket based on the `prefix` supplied. If a `key` is supplied with the `prefix`, a secondary filter is applied.\n    Args:\n        prefix (str): Main filter.\n        key (str | None, optional): Secondary filter. Defaults to None.\n    Yields:\n        Iterator[str]: The keys from the bucket matching prefix and key.\n    \"\"\"  # noqa: E501\nobjs = self.bucket.objects.filter(Prefix=prefix)\nfor obj in objs:\nif key:\nif key in obj.key:\nyield obj.key\nelse:\nyield obj.key\n</code></pre>"},{"location":"cf_r2/#start_sdk.cf_r2.CFR2_Bucket.get_root_prefixes","title":"<code>get_root_prefixes()</code>","text":"<p>See adapted recipe from boto3 re: top-level prefixes.</p> <p>Returns:</p> Type Description <p>list[str]: Matching prefixes in the root of the bucket.</p> Source code in <code>start_sdk/cf_r2.py</code> Python<pre><code>def get_root_prefixes(self):\n\"\"\"See adapted recipe from boto3 re: top-level [prefixes](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#list-top-level-common-prefixes-in-amazon-s3-bucket).\n    Returns:\n        list[str]: Matching prefixes in the root of the bucket.\n    \"\"\"  # noqa: E501\n_objs = []\npaginator = self.client.get_paginator(\"list_objects\")\nresult = paginator.paginate(Bucket=self.name, Delimiter=\"/\")\nfor prefix in result.search(\"CommonPrefixes\"):\n_objs.append(prefix.get(\"Prefix\"))  # type: ignore\nreturn _objs\n</code></pre>"},{"location":"cf_r2/#start_sdk.cf_r2.CFR2_Bucket.upload","title":"<code>upload(file_like, loc, args={})</code>","text":"<p>Upload local <code>file_like</code> contents to r2-bucket path <code>loc</code>.</p> <p>Parameters:</p> Name Type Description Default <code>file_like</code> <code>str | Path</code> <p>Local file</p> required <code>loc</code> <code>str</code> <p>Remote location</p> required <code>args</code> <code>dict</code> <p>Will populate <code>ExtraArgs</code> during upload. Defaults to {}.</p> <code>{}</code> Source code in <code>start_sdk/cf_r2.py</code> Python<pre><code>def upload(self, file_like: str | Path, loc: str, args: dict = {}):\n\"\"\"Upload local `file_like` contents to r2-bucket path `loc`.\n    Args:\n        file_like (str | Path): Local file\n        loc (str): Remote location\n        args (dict, optional): Will populate `ExtraArgs` during upload.\n            Defaults to {}.\n    \"\"\"\nwith open(file_like, \"rb\") as read_file:\nreturn self.bucket.upload_fileobj(read_file, loc, ExtraArgs=args)\n</code></pre>"},{"location":"github/","title":"Read Github","text":"<p>         Bases: <code>BaseSettings</code></p>"},{"location":"github/#start_sdk.github.Github--github-api-v2022-11-28","title":"Github API v2022-11-28","text":"<p>Add secrets to .env file:</p> Field in .env Github Credentials Where credential found <code>GH_TOKEN</code> Github Personal Access Token Ensure fine-grained Personal Access Token Github Developer Settings can access the repository represented in the url. <code>GH_TOKEN_VERSION</code> Default: <code>2022-11-28</code> See docs Source code in <code>start_sdk/github.py</code> Python<pre><code>class Github(BaseSettings):\n\"\"\"\n    # Github API v2022-11-28\n    Add secrets to .env file:\n    Field in .env | Github Credentials | Where credential found\n    :--|:--:|:--\n    `GH_TOKEN` | Github Personal Access Token | Ensure _fine-grained_ Personal Access Token [Github Developer Settings](https://github.com/settings/tokens?type=beta) can access the repository represented in the url.\n    `GH_TOKEN_VERSION` | Default: `2022-11-28` | See [docs](https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28)\n    \"\"\"  # noqa: E501\ntoken: str = Field(\ndefault=...,\nrepr=False,\nenv=\"GH_TOKEN\",\n)\nversion: str = Field(\ndefault=\"2022-11-28\",\nrepr=False,\nenv=\"GH_TOKEN_VERSION\",\n)\nclass Config:\nenv_file = \".env\"\nenv_file_encoding = \"utf-8\"\ndef get(\nself,\nurl: str,\nmedia_type: str | None = \".raw\",\nparams: dict = {},\n) -&gt; httpx.Response:\n\"\"\"See requisite [headers](https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#get-repository-content--code-samples)\n        Args:\n            url (str): _description_\n            media_type (str | None, optional): _description_. Defaults to \".raw\".\n            params (dict, optional): _description_. Defaults to {}.\n        Returns:\n            httpx.Response: _description_\n        \"\"\"  # noqa: E501\nwith httpx.Client(timeout=120) as client:\nreturn client.get(\nurl,\nparams=params,\nheaders={\n\"Accept\": f\"application/vnd.github{media_type}\",\n\"Authorization\": f\"token {self.token}\",\n\"X-GitHub-Api-Version\": self.version,\n},\n)\n</code></pre>"},{"location":"github/#start_sdk.github.Github-functions","title":"Functions","text":""},{"location":"github/#start_sdk.github.Github.get","title":"<code>get(url, media_type='.raw', params={})</code>","text":"<p>See requisite headers</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>description</p> required <code>media_type</code> <code>str | None</code> <p>description. Defaults to \".raw\".</p> <code>'.raw'</code> <code>params</code> <code>dict</code> <p>description. Defaults to {}.</p> <code>{}</code> <p>Returns:</p> Type Description <code>httpx.Response</code> <p>httpx.Response: description</p> Source code in <code>start_sdk/github.py</code> Python<pre><code>def get(\nself,\nurl: str,\nmedia_type: str | None = \".raw\",\nparams: dict = {},\n) -&gt; httpx.Response:\n\"\"\"See requisite [headers](https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#get-repository-content--code-samples)\n    Args:\n        url (str): _description_\n        media_type (str | None, optional): _description_. Defaults to \".raw\".\n        params (dict, optional): _description_. Defaults to {}.\n    Returns:\n        httpx.Response: _description_\n    \"\"\"  # noqa: E501\nwith httpx.Client(timeout=120) as client:\nreturn client.get(\nurl,\nparams=params,\nheaders={\n\"Accept\": f\"application/vnd.github{media_type}\",\n\"Authorization\": f\"token {self.token}\",\n\"X-GitHub-Api-Version\": self.version,\n},\n)\n</code></pre>"}]}